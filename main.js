!function(){"use strict";class e{constructor(e,t){let{data:s,handleImageClick:r,handleDeleteCard:i,confirmPopup:o,api:n}=e;this._name=s.name,this._link=s.link,this._id=s._id,this._isLiked=s.isLiked,this._cardSelector=t,this._handleImageClick=r,this._handleDeleteCard=i,this._confirmPopup=o,this._api=n}_setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})})),this._likeButton.addEventListener("click",this._handleLikeIcon),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this,this._id)}))}removeCard(){this._cardElement.remove(),this._cardElement=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setLike(){this._isLiked&&this._likeButton.classList.add("card__like-button_active")}_handleLikeIcon=()=>{this._isLiked?this._api.unlikeCard(this._id).then((()=>{this._likeButton.classList.remove("card__like-button_active"),this._isLiked=!this._isLiked})).catch((e=>{console.error(e)})):this._api.likeCard(this._id).then((()=>{this._likeButton.classList.add("card__like-button_active"),this._isLiked=!this._isLiked})).catch((e=>{console.error(e)}))};getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardTitle.textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name,this._setEventListeners(),this._setLike(),this._cardElement}}class t{constructor(e){console.log(e),this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose),document.addEventListener("mousedown",this._closeModalOnRemoteClick)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose),document.removeEventListener("mousedown",this._closeModalOnRemoteClick)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_closeModalOnRemoteClick=e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close"))&&this.close()};setEventListeners(){this._popupCloseButton=this._popupElement.querySelector(".modal__close-button"),this._popupCloseButton.addEventListener("click",(()=>this.close()))}}class s extends t{constructor(e,t){super(e),console.log(this._popupElement),this._popupForm=this._popupElement.querySelector(".modal__form"),console.log(this._popupForm),this._handleFormSubmit=t,this._inputList=this._popupForm.querySelectorAll(".modal__input"),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}close(){super.close(),this._popupForm.reset()}_getInputValues(){const e={};for(const t of this._inputList)e[t.name]=t.value;return e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this.renderLoading(!0);const t=this._getInputValues();this._handleFormSubmit(t).then((()=>{this.close()})).finally((()=>{this.renderLoading(!1)}))}))}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}}const r=document.querySelector(".profile__add-button"),i=document.querySelector("#profile-edit-button"),o=document.querySelector('input[name="name"]'),n=document.querySelector('input[name="about"]'),a=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_request(e,t){return fetch(e,t).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).finally((()=>{console.log("Done with user info")}))}updateUserInfo(e){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})})}addNewCards(e){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then((e=>e)).finally((()=>{console.log("Done adding New Card Information from Server")}))}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:!0})})}unlikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e)).finally((()=>{console.log("Done deleting card")}))}updateAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"7ed3bb2f-7b5a-422d-a884-e2fa31c7bd62","Content-Type":"application/json"}}),l=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._name=document.querySelector(t),this._job=document.querySelector(s),this._profileImage=document.querySelector(r)}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent,image:this._profileImage.src}}setUserInfo(e){let{name:t,about:s,avatar:r}=e;this._name.textContent=t,console.log(this._name),this._job.textContent=s,console.log(r),this._profileImage.src=r}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"}),d=new s("#modal-edit-avatar",(e=>a.updateAvatar(e).then((e=>{l.setUserInfo(e)})).catch((e=>{console.error(e)}))));d.setEventListeners(),document.querySelector("#profile-image-pencil").addEventListener("click",(()=>{v["edit-avatar-form"].resetValidation(),d.open()}));const c=new class extends t{constructor(e){let{popupSelector:t,handleConfirm:s}=e;super(t),this._handleConfirm=s,this._confirmButton=this._popupElement.querySelector(".modal__form-button")}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this._confirmButton.textContent=e?t:"Yes"}open(e,t){super.open(),this._card=e,this._cardId=t}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(()=>{this.renderLoading(!0),this._handleConfirm(this._card,this._cardId).then((()=>{this.close()})).finally((()=>{this.renderLoading(!1)}))}))}}({popupSelector:"#delete-card-modal",handleConfirm:(e,t)=>a.deleteCard(t).then((()=>{e.removeCard()})).catch((e=>{console.error(e)}))});c.setEventListeners();const h=new class extends t{constructor(e){let{popupSelector:t}=e;super(t),this._previewImage=this._popupElement.querySelector(".modal__image-preview"),this._previewImageTitle=this._popupElement.querySelector(".modal__image-title")}open(e){this._previewImage.src=e.link,this._previewImage.alt=e.name,this._previewImageTitle.textContent=e.name,super.open()}}({popupSelector:"#preview-image-modal"});let _;const u=t=>{const s=new e({data:t,handleImageClick:e=>{h.open(e)},handleDeleteCard:(e,t)=>{c.open(e,t)},confirmPopup:c,api:a},"#card-template");_.addItem(s.getView())};_=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){console.log("oooooooooooooo"),console.log(e),e.forEach((e=>this._renderer(e)))}addItem(e){this._container.prepend(e)}}({renderer:u},".cards__list");const m=new s("#add-card-modal",(e=>a.addNewCards(e).then((e=>{u(e)})).catch((e=>{console.error(e)}))));Promise.all([a.getUserInfo(),a.getInitialCards()]).then((e=>{let[t,s]=e;l.setUserInfo(t),_.renderItems(s)})).catch((e=>{console.error(e)}));const p=new s("#profile-edit-modal",(e=>a.updateUserInfo(e).then((e=>{l.setUserInfo(e)})).catch((e=>{console.error(e)}))));p.setEventListeners(),m.setEventListeners(),h.setEventListeners();const v={};var E;E={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(E.formSelector)).forEach((e=>{const t=new class{constructor(e,t){this._formElement=t,console.log(this._formElement),this._inputSelector=e.inputSelector,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(e.submitButtonSelector),this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.every((e=>e.validity.valid))}toggleButtonState(){this._hasInvalidInput()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}resetValidation(){this.toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}(E,e),s=e.getAttribute("name");v[s]=t,t.enableValidation()})),i.addEventListener("click",(()=>{v["edit-profile-form"].resetValidation(),(()=>{const e=l.getUserInfo();o.value=e.name,n.value=e.job})(),p.open()})),r.addEventListener("click",(()=>{v["add-card-form"].resetValidation(),m.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,